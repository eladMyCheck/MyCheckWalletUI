//
//  AddCreditCardModels.swift
//  Pods
//
//  Created by elad schiller on 7/23/17.
//  Copyright (c) 2017 __MyCompanyName__. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum AddCreditCard
{
    //MARK: State and form info
    enum State {
        case inputingDetails
        
        case callingServer
    }
    struct FormData {
        let number: String
        let date: String
        let cvv: String
        let zip: String?
    }
    // MARK: Use cases
    
    enum SubmitForm
    {
        struct Request
        {
            let number: String
            let date: String
            let cvv: String
            let zip: String?
        }
        struct Response
        {
            let inputValid = numberValid && dateValid && cvvValid && zipValid
            let numberValid: String
            let dateValid: String
            let cvvValid: String
            let zipValid: String
        }
        struct ViewModel
        {
            struct failResponse {
                let inputValid = numberValid && dateValid && cvvValid && zipValid
                let numberValid: Bool
                let dateValid: Bool
                let cvvValid: Bool
                let zipValid: Bool
                let errorMessage
                
            }
            
            enum addCreditCardResponse {
                case success
                case fail(failResponse)
            }
            
        }
    }
    
    
    enum TextChanged
    {
        enum FieldType {
            case number
            case date
            case cvv
            case zip
        }
        
        struct Request
        {
            let type: FieldType
            let string: String
        }
        struct Response
        {
            let type: FieldType
            let text: String
            let valid: Bool
        }
        
        struct ViewModel
        {
            struct failResponse {
                let inputValid = numberValid && dateValid && cvvValid && zipValid
                let numberValid: Bool
                let dateValid: Bool
                let cvvValid: Bool
                let zipValid: Bool
                let errorMessage
                
            }
            
            enum addCreditCardResponse {
                case success
                case fail(failResponse)
            }
            
        }
        
        
        
        enum stateChange
        {
            struct Response
            {
                
                
                let state: State
            }
            
            struct ViewModel
            {
                
                enum stateChangeResponse {
                    let showLoadingView: Bool
                }
                
            }
            
        }
    }
    
    
    
}
